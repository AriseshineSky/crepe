const mongoose = require("mongoose");
const BaseModel = require("./base_model");
const Schema = mongoose.Schema;
const LotSchema = new Schema({
	id: {
		type: String,
		required: true,
	},
	product: {
		type: Schema.Types.ObjectId,
		ref: "Product",
	},
	purchase: {
		type: Schema.Types.ObjectId,
		ref: "Purchase",
	},
	memo: { type: String },
	box: { type: Number },
	chargeWeight: { type: Number },
	estimatedAmount: { type: Number },
	receiveRnQuantity: { type: Number },
	quantity: { type: Number },
	actualAmount: { type: Number },
	code: { type: String },
	status: { type: String },
	statusName: { type: String },
	trackings: { type: String },
	transport: { type: String },
	transportMode: { type: String },
	transportName: { type: String },
	transportPrescription: { type: String },
	volumeWeightCoefficient: { type: String },
	orderId: { type: String },
	shipmentDate: { type: String },
	fromWarehouseNames: { type: String },
	warehouseNames: { type: String },
	confirmShipmentDate: { type: Date },
	estimateArrivePortDate: { type: Date },
	expectShipmentDate: { type: Date },
	sailDate: { type: Date },
	actualArrivePortDate: { type: Date },
	actualAmountTime: { type: Date },
	actualArrivalDate: { type: Date },
	arrivalWarehouseId: { type: String },
	deliveryStatus: { type: String },
	createAt: { type: Date, default: Date.now() },
	updateAt: { type: Date, default: Date.now() },
	deletedAt: { type: Date },
	packingCodeList: { type: String },
	channelId: { type: String },
	chargeUnitPrice: { type: String },
	chargeWeight: { type: String },
	spiltTrackings: { type: String },
	chargeWeightUnit: { type: String },
	relevanceCodeList: { type: String },
	containerType: { type: String },
	country: { type: String },
	updateTime: { type: Date },
	createdAt: { type: Date },
	expectShipmentDate: { type: Date },
	fbaWarehouse: { type: String },
	flCodeList: { type: String },
	importCompany: { type: String },
	importCompanyName: { type: String },
	createdTime: { type: Date },
	isShipment: { type: String },
	payer: { type: String },
	receiptDate: { type: Date },
	receivingAt: { type: Date },
	receiptQuantity: { type: String },
	diffQuantity: { type: String },
	supplierCode: { type: String },
	expectArrivalDate: { type: Date },
	expectShipmentDate: { type: Date },
	fid: { type: String },
	qcType: { type: String },
	reviewerId: { type: String },
	qcStatus: { type: String },
	expectQcDate: { type: String },
	memo: { type: String },
	totalWarehousingQuantity: { type: String },
	trackings: { type: String },
	supplierWarehousingFlag: { type: String },
	warehousingDate: { type: String },
	id: { type: String },
	qcWay: { type: String },
	auditStatusName: { type: String },
	quickInboundCreateFlag: { type: String },
	dlCode: [{ type: String }],
	arrivalSupplierId: { type: String },
	consumePackageFlag: { type: String },
	packages: { type: String },
	supervisorId: { type: String },
	transferName: { type: String },
	allocateFlag: { type: String },
	transferWarehouseId: { type: String },
	warehouseType: { type: String },
	needQc: { type: String },
	qcStatusName: { type: String },
	supervisorName: { type: String },
	purchaseBudgetFinanceV2: { type: String },
	deliveryAmount: { type: String },
	supplierCode: { type: String },
	paymentType: { type: String },
	otherBizCode: { type: String },
	arrivalMarketName: { type: String },
	domesticLogisticsDetailsList: { type: String },
	isEntryBudgetFinance: { type: String },
	procurementMethod: { type: String },
	currency: { type: String },
	arrivalMarketId: { type: String },
	deliveryDate: { type: String },
	skuSpecies: { type: String },
	procureWay: { type: String },
	transferWarehouseName: { type: String },
	inboundDetailsVoList: { type: String },
	updateTime: { type: String },
	lotNoStateName: { type: String },
	reviewer: { type: String },
	totalVolumeWeight: { type: String },
	arrivalWarehouseName: { type: String },
	shipmentIds: { type: String },
	qcWayName: { type: String },
	createTime: { type: String },
	auditStatus: { type: String },
	qcCode: { type: String },
	qcTypeName: { type: String },
	createdAt: { type: String },
	lotnoItemVOList: { type: String },
	deliveryCode: { type: String },
	arrivalWarehouseId: { type: String },
	warehousingQuantity: { type: String },
	deliveryWarehouseId: { type: String },
	totalDeliveryQuantity: { type: String },
	logisticsCode: { type: String },
	totalValueWarehousingAmount: { type: String },
	deliveryWarehouseName: { type: String },
	transfer: { type: String },
	lotNoState: { type: String },
	creater: { type: String },
	reviewTime: { type: String },
	code: { type: String },
	purchaseSubjectName: { type: String },
	asCode: { type: String },
	inboundCode: { type: String },
	deliveryDetailsVoList: { type: String },
	purchaseType: { type: String },
	attachmentVOList: { type: String },
	poCode: { type: String },
	deliveryQuantity: { type: String },
	shipmentDate: { type: String },
	domesticLogisticsCost: { type: String },
	supplierName: { type: String },
	quantity: { type: String },
	logsList: { type: String },
	pocCode: { type: String },
	purchaseTypeName: { type: String },
	paymentTypeName: { type: String },
	deliveryType: { type: String },
	isQc: { type: String },
	warehousingAmount: { type: String },
	totalValueAmount: { type: String },
	isDelivery: { type: String },
	flCode: { type: String },
	purchaseSubjectId: { type: String },
	arrivalWarehouseAdjustFlag: { type: String },
	totalPackageWeight: { type: String },
	customPoCode: { type: String },
});

LotSchema.plugin(BaseModel);

mongoose.model("Lot", LotSchema);
